// Code generated by mockery v2.10.0. DO NOT EDIT.

package schedule

import (
	models "github.com/grafana/grafana/pkg/services/ngalert/models"
	state "github.com/grafana/grafana/pkg/services/ngalert/state"
	mock "github.com/stretchr/testify/mock"
)

// FakeAlertNotifier is an autogenerated mock type for the AlertNotifier type
type FakeAlertNotifier struct {
	mock.Mock
}

type FakeAlertNotifier_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeAlertNotifier) EXPECT() *FakeAlertNotifier_Expecter {
	return &FakeAlertNotifier_Expecter{mock: &_m.Mock}
}

// Expire provides a mock function with given fields: key, states
func (_m *FakeAlertNotifier) Expire(key models.AlertRuleKey, states []*state.State) error {
	ret := _m.Called(key, states)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.AlertRuleKey, []*state.State) error); ok {
		r0 = rf(key, states)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeAlertNotifier_Expire_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Expire'
type FakeAlertNotifier_Expire_Call struct {
	*mock.Call
}

// Expire is a helper method to define mock.On call
//  - key models.AlertRuleKey
//  - states []*state.State
func (_e *FakeAlertNotifier_Expecter) Expire(key interface{}, states interface{}) *FakeAlertNotifier_Expire_Call {
	return &FakeAlertNotifier_Expire_Call{Call: _e.mock.On("Expire", key, states)}
}

func (_c *FakeAlertNotifier_Expire_Call) Run(run func(key models.AlertRuleKey, states []*state.State)) *FakeAlertNotifier_Expire_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.AlertRuleKey), args[1].([]*state.State))
	})
	return _c
}

func (_c *FakeAlertNotifier_Expire_Call) Return(_a0 error) *FakeAlertNotifier_Expire_Call {
	_c.Call.Return(_a0)
	return _c
}

// Notify provides a mock function with given fields: key, states
func (_m *FakeAlertNotifier) Notify(key models.AlertRuleKey, states []*state.State) error {
	ret := _m.Called(key, states)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.AlertRuleKey, []*state.State) error); ok {
		r0 = rf(key, states)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeAlertNotifier_Notify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Notify'
type FakeAlertNotifier_Notify_Call struct {
	*mock.Call
}

// Notify is a helper method to define mock.On call
//  - key models.AlertRuleKey
//  - states []*state.State
func (_e *FakeAlertNotifier_Expecter) Notify(key interface{}, states interface{}) *FakeAlertNotifier_Notify_Call {
	return &FakeAlertNotifier_Notify_Call{Call: _e.mock.On("Notify", key, states)}
}

func (_c *FakeAlertNotifier_Notify_Call) Run(run func(key models.AlertRuleKey, states []*state.State)) *FakeAlertNotifier_Notify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.AlertRuleKey), args[1].([]*state.State))
	})
	return _c
}

func (_c *FakeAlertNotifier_Notify_Call) Return(_a0 error) *FakeAlertNotifier_Notify_Call {
	_c.Call.Return(_a0)
	return _c
}
