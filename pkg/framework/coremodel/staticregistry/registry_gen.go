// This file is autogenerated. DO NOT EDIT.
//
// Generated by pkg/framework/coremodel/gen.go

package staticregistry

import (
	"sync"

	"github.com/google/wire"

	"github.com/grafana/grafana/pkg/coremodel/dashboard"
	"github.com/grafana/grafana/pkg/cuectx"
	"github.com/grafana/grafana/pkg/framework/coremodel"
	"github.com/grafana/thema"
)

// CoremodelSet contains all of the wire-style providers from coremodels.
var CoremodelSet = wire.NewSet(
	dashboard.ProvideCoremodel,
	ProvideExplicitRegistry,
	ProvideRegistry,
)

var (
	eregOnce       sync.Once
	defaultEReg    ExplicitRegistry
	defaultERegErr error

	regOnce       sync.Once
	defaultReg    *coremodel.Registry
	defaultRegErr error
)

// ExplicitRegistry provides access to individual coremodels via explicit
// method calls, which are friendly to static analysis.
type ExplicitRegistry interface {
	Dashboard() *dashboard.Coremodel
}

type explicitRegistry struct {
	dashboard *dashboard.Coremodel
}

func (er explicitRegistry) Dashboard() *dashboard.Coremodel {
	return er.dashboard
}

func provideExplicitRegistry(lib *thema.Library) (ExplicitRegistry, error) {
	if lib == nil {
		eregOnce.Do(func() {
			defaultEReg, defaultERegErr = doProvideExplicitRegistry(cuectx.ProvideThemaLibrary())
		})
		return defaultEReg, defaultERegErr
	}

	return doProvideExplicitRegistry(*lib)
}

func doProvideExplicitRegistry(lib thema.Library) (ExplicitRegistry, error) {
	var err error
	reg := explicitRegistry{}

	reg.dashboard, err = dashboard.ProvideCoremodel(lib)
	if err != nil {
		return nil, err
	}

	return reg, nil
}

func provideRegistry() (*coremodel.Registry, error) {
	ereg, err := provideExplicitRegistry(nil)
	if err != nil {
		return nil, err
	}

	regOnce.Do(func() {
		defaultReg, defaultRegErr = doProvideRegistry(ereg)
	})
	return defaultReg, defaultRegErr
}

func doProvideRegistry(ereg ExplicitRegistry) (*coremodel.Registry, error) {
	return coremodel.NewRegistry(
		ereg.Dashboard(),
	)
}
